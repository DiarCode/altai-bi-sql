datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int      @id @default(autoincrement()) @map("id")
  fullName    String   @map("full_name")
  phoneNumber String   @unique @map("phone_number")
  
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  otpRequest  UsersOTPRequest?
  session     UsersSession?
  workspaces  Workspace[]
  userRequests UserRequest[]

  @@map("users")
}

model UsersOTPRequest {
  id          Int      @id @default(autoincrement()) @map("id")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int      @unique @map("user_id")
  phoneNumber String   @map("phone_number")
  otpCode     String   @map("otp_code")
  
  createdAt   DateTime @default(now()) @map("created_at")
  expiresAt   DateTime @map("expires_at")

  @@map("users_otp_requests")
}

model UsersSession {
  id        Int      @id @default(autoincrement()) @map("id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int      @unique @map("user_id")
  token     String   @unique @map("token")
  
  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")

  @@map("users_sessions")
}

enum WORKSPACE_PURPOSE {
  HEALTH_CARE
  E_COMMERCE
  GOVERNMENT
  ACCOUNTING
  MARKETING
  EDUCATION
  FINANCE
  ENTERTAINMENT
  TECHNOLOGY
  REAL_ESTATE
  TRAVEL
  FOOD_BEVERAGE
  NON_PROFIT
  SPORTS
  DEFAULT
  OTHER
}

enum DATA_SOURCE_TYPE {
  POSTGRESQL
  MYSQL
}

enum GRAPH_TYPE {
  BAR_CHART
  LINE_CHART
}

enum USER_REQUEST_STATUS {
  PENDING
  SUCCEEDED
  FAILED
}

model Workspace {
  id          Int               @id @default(autoincrement()) @map("id")
  name        String            @map("name")
  description String            @map("description")
  purpose     WORKSPACE_PURPOSE @map("purpose")
  ownerId     Int               @map("owner_id")
  owner       User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  createdAt           DateTime              @default(now()) @map("created_at")
  updatedAt           DateTime              @default(now()) @updatedAt @map("updated_at")

  workspaceDataSources WorkspaceDataSource[]
  userRequests        UserRequest[]
  dataTables          DataTable[]
  ingestions          WorkspaceIngestion[]

  @@map("workspaces")
}

model WorkspaceDataSource {
  id          Int              @id @default(autoincrement()) @map("id")
  workspace   Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId Int              @map("workspace_id")
  type        DATA_SOURCE_TYPE @map("type")
  config      Json             @map("config")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("workspace_data_sources")
}

model UserRequest {
  id          Int         @id @default(autoincrement()) @map("id")
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int         @map("user_id")
  workspaceId Int         @map("workspace_id")
  workspace   Workspace   @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  prompt      String      @map("prompt")
  status      USER_REQUEST_STATUS @map("status")
  graphType   GRAPH_TYPE? @map("graph_type")
  sqlScript   String?     @map("sql_script")
  resultText  String?     @map("result_text")
  resultTable Json?       @map("result_table")
  graphConfig Json?       @map("graph_config")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@map("user_requests")
}

/// Metadata models for discovered database schema per workspace
model DataTable {
  id           Int        @id @default(autoincrement()) @map("id")
  workspace    Workspace  @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId  Int        @map("workspace_id")
  schemaName   String     @map("schema_name")
  tableName    String     @map("table_name")
  businessName String?    @map("business_name")
  description  String?    @map("description")

  columns      DataColumn[]
  fkFrom       ForeignKey[] @relation("FK_From_Table")
  fkTo         ForeignKey[] @relation("FK_To_Table")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([workspaceId, schemaName, tableName], map: "uniq_table_per_workspace")
  @@map("data_tables")
}

model DataColumn {
  id            Int       @id @default(autoincrement()) @map("id")
  table         DataTable @relation(fields: [tableId], references: [id], onDelete: Cascade)
  tableId       Int       @map("table_id")
  columnName    String    @map("column_name")
  dataType      String    @map("data_type")
  isNullable    Boolean   @default(true) @map("is_nullable")
  isPrimaryKey  Boolean   @default(false) @map("is_primary_key")
  isForeignKey  Boolean   @default(false) @map("is_foreign_key")
  businessName  String?   @map("business_name")
  description   String?   @map("description")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  fkFrom ForeignKey[] @relation("FK_From_Column")
  fkTo   ForeignKey[] @relation("FK_To_Column")

  @@unique([tableId, columnName], map: "uniq_column_per_table")
  @@map("data_columns")
}

model ForeignKey {
  id             Int        @id @default(autoincrement()) @map("id")
  fromTable      DataTable  @relation("FK_From_Table", fields: [fromTableId], references: [id], onDelete: Cascade)
  fromTableId    Int        @map("from_table_id")
  fromColumn     DataColumn @relation("FK_From_Column", fields: [fromColumnId], references: [id], onDelete: Cascade)
  fromColumnId   Int        @map("from_column_id")
  toTable        DataTable  @relation("FK_To_Table", fields: [toTableId], references: [id], onDelete: Cascade)
  toTableId      Int        @map("to_table_id")
  toColumn       DataColumn @relation("FK_To_Column", fields: [toColumnId], references: [id], onDelete: Cascade)
  toColumnId     Int        @map("to_column_id")
  constraintName String?    @map("constraint_name")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([fromColumnId], map: "uniq_fk_from_column")
  @@map("foreign_keys")
}

enum INGESTION_STATUS {
  PENDING
  RUNNING
  SUCCEEDED
  FAILED
}

model WorkspaceIngestion {
  id          Int              @id @default(autoincrement()) @map("id")
  workspace   Workspace        @relation(fields: [workspaceId], references: [id], onDelete: Cascade)
  workspaceId Int              @map("workspace_id")
  status      INGESTION_STATUS @default(PENDING) @map("status")
  error       String?          @map("error")
  startedAt   DateTime         @default(now()) @map("started_at")
  finishedAt  DateTime?        @map("finished_at")

  @@index([workspaceId], map: "idx_ingestion_workspace")
  @@map("workspace_ingestions")
}
